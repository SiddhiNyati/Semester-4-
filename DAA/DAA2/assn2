#include <iostream>
#include <vector>
using namespace std;

struct Process {
    int id;
    int priority;
};
class PriorityQueue {
private:
    vector<Process> heap;
    void heapifyUp(int index) {
        while (index > 0) {
            int parentIndex = (index - 1) / 2;
            if (heap[index].priority > heap[parentIndex].priority) {
                swap(heap[index], heap[parentIndex]);
                index = parentIndex;
            } else {
                break;
            }
        }
    }
    void heapifyDown(int index) {
        int leftChild = 2 * index + 1;
        int rightChild = 2 * index + 2;
        int largest = index;
        if (leftChild < heap.size() && heap[leftChild].priority > heap[largest].priority) {
            largest = leftChild;
        }
        if (rightChild < heap.size() && heap[rightChild].priority > heap[largest].priority) {
            largest = rightChild;
        }
        if (largest != index) {
            swap(heap[index], heap[largest]);
            heapifyDown(largest);
        }
    }
public:
    void insertProcess() {
        Process newProcess;
        cout << "Enter process ID: ";
        cin >> newProcess.id;
        cout << "Enter priority: ";
        cin >> newProcess.priority;
        heap.push_back(newProcess);
        heapifyUp(heap.size() - 1);
        cout << "Process with ID " << newProcess.id << " inserted with priority " << newProcess.priority << endl;
    }
    void deleteProcess() {
        if (heap.empty()) {
            cout << "Heap is empty. Nothing to delete." << endl;
            return;
        }
        Process deletedProcess = heap[0];
        heap[0] = heap.back();
        heap.pop_back();
        heapifyDown(0);

        cout << "Process with ID " << deletedProcess.id << " and priority " << deletedProcess.priority << " deleted." << endl;
    }
    void displayProcesses() {
        if (heap.empty()) {
            cout << "Heap is empty." << endl;
        } else {
            cout << "Processes in the heap:" << endl;
            for (const Process &p : heap) {
                cout << "ID: " << p.id << ", Priority: " << p.priority << endl;
            }
        }
    }
};
int main() {
    PriorityQueue priorityQueue;
    while (true) {
        cout << "\nChoose an operation:" << endl;
        cout << "1. Insert\n2. Delete\n3. Display\n4. Exit\n";
        int choice;
        cin >> choice;
        switch (choice) {
            case 1:
                priorityQueue.insertProcess();
                break;
            case 2:
                priorityQueue.deleteProcess();
                break;
            case 3:
                priorityQueue.displayProcesses();
                break;
            case 4:
                cout << "Exiting the program." << endl;
                return 0;
            default:
                cout << "Invalid choice. Please choose again." << endl;
        }
    }
    return 0;
}